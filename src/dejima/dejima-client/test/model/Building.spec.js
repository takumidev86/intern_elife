/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。 
 *
 * The version of the OpenAPI document: 6.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EsApi);
  }
}(this, function(expect, EsApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EsApi.Building();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Building', function() {
    it('should create an instance of Building', function() {
      // uncomment below and update the code to test Building
      //var instane = new EsApi.Building();
      //expect(instance).to.be.a(EsApi.Building);
    });

    it('should have the property buildingGuid (base name: "building_guid")', function() {
      // uncomment below and update the code to test the property buildingGuid
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property modified (base name: "modified")', function() {
      // uncomment below and update the code to test the property modified
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingName (base name: "building_name")', function() {
      // uncomment below and update the code to test the property buildingName
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingFurigana (base name: "building_furigana")', function() {
      // uncomment below and update the code to test the property buildingFurigana
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property totalUnits (base name: "total_units")', function() {
      // uncomment below and update the code to test the property totalUnits
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingClass (base name: "building_class")', function() {
      // uncomment below and update the code to test the property buildingClass
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingClassCode (base name: "building_class_code")', function() {
      // uncomment below and update the code to test the property buildingClassCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingType (base name: "building_type")', function() {
      // uncomment below and update the code to test the property buildingType
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingTypeCode (base name: "building_type_code")', function() {
      // uncomment below and update the code to test the property buildingTypeCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property totalFloors (base name: "total_floors")', function() {
      // uncomment below and update the code to test the property totalFloors
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property groundFloors (base name: "ground_floors")', function() {
      // uncomment below and update the code to test the property groundFloors
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property basementFloors (base name: "basement_floors")', function() {
      // uncomment below and update the code to test the property basementFloors
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property setback (base name: "setback")', function() {
      // uncomment below and update the code to test the property setback
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property setbackCode (base name: "setback_code")', function() {
      // uncomment below and update the code to test the property setbackCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property setbackArea (base name: "setback_area")', function() {
      // uncomment below and update the code to test the property setbackArea
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property totalFloorArea (base name: "total_floor_area")', function() {
      // uncomment below and update the code to test the property totalFloorArea
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property architecturalConditionFlag (base name: "architectural_condition_flag")', function() {
      // uncomment below and update the code to test the property architecturalConditionFlag
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property kenchikuKakuninNumber (base name: "kenchiku_kakunin_number")', function() {
      // uncomment below and update the code to test the property kenchikuKakuninNumber
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property contractor (base name: "contractor")', function() {
      // uncomment below and update the code to test the property contractor
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property completionDatejun (base name: "completion_datejun")', function() {
      // uncomment below and update the code to test the property completionDatejun
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property landReclamationDatejun (base name: "land_reclamation_datejun")', function() {
      // uncomment below and update the code to test the property landReclamationDatejun
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property structure (base name: "structure")', function() {
      // uncomment below and update the code to test the property structure
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property structureCode (base name: "structure_code")', function() {
      // uncomment below and update the code to test the property structureCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property structureNote (base name: "structure_note")', function() {
      // uncomment below and update the code to test the property structureNote
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property roadSituation (base name: "road_situation")', function() {
      // uncomment below and update the code to test the property roadSituation
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property roadSituationCode (base name: "road_situation_code")', function() {
      // uncomment below and update the code to test the property roadSituationCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property hirayadateFlag (base name: "hirayadate_flag")', function() {
      // uncomment below and update the code to test the property hirayadateFlag
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property prefecture (base name: "prefecture")', function() {
      // uncomment below and update the code to test the property prefecture
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property city (base name: "city")', function() {
      // uncomment below and update the code to test the property city
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property town (base name: "town")', function() {
      // uncomment below and update the code to test the property town
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property tyoume (base name: "tyoume")', function() {
      // uncomment below and update the code to test the property tyoume
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property addressText (base name: "address_text")', function() {
      // uncomment below and update the code to test the property addressText
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property branchNumberText (base name: "branch_number_text")', function() {
      // uncomment below and update the code to test the property branchNumberText
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property zipcodeText (base name: "zipcode_text")', function() {
      // uncomment below and update the code to test the property zipcodeText
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property jisCodeValue (base name: "jis_code_value")', function() {
      // uncomment below and update the code to test the property jisCodeValue
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property latitude (base name: "latitude")', function() {
      // uncomment below and update the code to test the property latitude
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property longitude (base name: "longitude")', function() {
      // uncomment below and update the code to test the property longitude
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property currentLandClass (base name: "current_land_class")', function() {
      // uncomment below and update the code to test the property currentLandClass
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property currentLandClassCode (base name: "current_land_class_code")', function() {
      // uncomment below and update the code to test the property currentLandClassCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property registeredLandClass (base name: "registered_land_class")', function() {
      // uncomment below and update the code to test the property registeredLandClass
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property topography (base name: "topography")', function() {
      // uncomment below and update the code to test the property topography
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property topographyCode (base name: "topography_code")', function() {
      // uncomment below and update the code to test the property topographyCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property isIrregularLandShape (base name: "is_irregular_land_shape")', function() {
      // uncomment below and update the code to test the property isIrregularLandShape
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property landSituation (base name: "land_situation")', function() {
      // uncomment below and update the code to test the property landSituation
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property landSituationCode (base name: "land_situation_code")', function() {
      // uncomment below and update the code to test the property landSituationCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property siteArea (base name: "site_area")', function() {
      // uncomment below and update the code to test the property siteArea
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property coverage (base name: "coverage")', function() {
      // uncomment below and update the code to test the property coverage
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property floorAreaRatio (base name: "floor_area_ratio")', function() {
      // uncomment below and update the code to test the property floorAreaRatio
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property landUsePlanning (base name: "land_use_planning")', function() {
      // uncomment below and update the code to test the property landUsePlanning
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property landUsePlanningCode (base name: "land_use_planning_code")', function() {
      // uncomment below and update the code to test the property landUsePlanningCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property privateRoadAreaPublic (base name: "private_road_area_public")', function() {
      // uncomment below and update the code to test the property privateRoadAreaPublic
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property privateRoadAreaMeasured (base name: "private_road_area_measured")', function() {
      // uncomment below and update the code to test the property privateRoadAreaMeasured
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property isIllegalFacingRoad (base name: "is_illegal_facing_road")', function() {
      // uncomment below and update the code to test the property isIllegalFacingRoad
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property privateRoadRateDenom (base name: "private_road_rate_denom")', function() {
      // uncomment below and update the code to test the property privateRoadRateDenom
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property privateRoadRateNumer (base name: "private_road_rate_numer")', function() {
      // uncomment below and update the code to test the property privateRoadRateNumer
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property manageCompanyName (base name: "manage_company_name")', function() {
      // uncomment below and update the code to test the property manageCompanyName
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property managerStyle (base name: "manager_style")', function() {
      // uncomment below and update the code to test the property managerStyle
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property managerStyleCode (base name: "manager_style_code")', function() {
      // uncomment below and update the code to test the property managerStyleCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property manageCompanyTelNumber (base name: "manage_company_tel_number")', function() {
      // uncomment below and update the code to test the property manageCompanyTelNumber
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property manageStyle (base name: "manage_style")', function() {
      // uncomment below and update the code to test the property manageStyle
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property manageStyleCode (base name: "manage_style_code")', function() {
      // uncomment below and update the code to test the property manageStyleCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property condominiumAssociationExistFlag (base name: "condominium_association_exist_flag")', function() {
      // uncomment below and update the code to test the property condominiumAssociationExistFlag
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property cityPlanningArea (base name: "city_planning_area")', function() {
      // uncomment below and update the code to test the property cityPlanningArea
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property cityPlanningAreaCode (base name: "city_planning_area_code")', function() {
      // uncomment below and update the code to test the property cityPlanningAreaCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property developmentNumber (base name: "development_number")', function() {
      // uncomment below and update the code to test the property developmentNumber
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property constructionMethod (base name: "construction_method")', function() {
      // uncomment below and update the code to test the property constructionMethod
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property outerWall (base name: "outer_wall")', function() {
      // uncomment below and update the code to test the property outerWall
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property useDistrict (base name: "use_district")', function() {
      // uncomment below and update the code to test the property useDistrict
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property buildingFeature (base name: "building_feature")', function() {
      // uncomment below and update the code to test the property buildingFeature
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property facingRoad (base name: "facing_road")', function() {
      // uncomment below and update the code to test the property facingRoad
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property cornerLot (base name: "corner_lot")', function() {
      // uncomment below and update the code to test the property cornerLot
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

    it('should have the property cornerLotCode (base name: "corner_lot_code")', function() {
      // uncomment below and update the code to test the property cornerLotCode
      //var instane = new EsApi.Building();
      //expect(instance).to.be();
    });

  });

}));
