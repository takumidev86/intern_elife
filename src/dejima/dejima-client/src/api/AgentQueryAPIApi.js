/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。 
 *
 * The version of the OpenAPI document: 6.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Agent from '../model/Agent';
import AgentList from '../model/AgentList';
import HTTPValidationError from '../model/HTTPValidationError';
import Staff from '../model/Staff';

/**
* AgentQueryAPI service.
* @module api/AgentQueryAPIApi
* @version 6.1.3
*/
export default class AgentQueryAPIApi {

    /**
    * Constructs a new AgentQueryAPIApi. 
    * @alias module:api/AgentQueryAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Agent By Customer Key
     * customer_key または agent_guidで問い合わせ先情報を取得する agent_guidは非推奨
     * @param {String} agentIdentifier 組織情報識別子 (customer_key or agent_guid(非推奨))
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Agent} and HTTP response
     */
    getAgentByCustomerKeyWithHttpInfo(agentIdentifier) {
      let postBody = null;
      // verify the required parameter 'agentIdentifier' is set
      if (agentIdentifier === undefined || agentIdentifier === null) {
        throw new Error("Missing the required parameter 'agentIdentifier' when calling getAgentByCustomerKey");
      }

      let pathParams = {
        'agent_identifier': agentIdentifier
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Agent;
      return this.apiClient.callApi(
        '/agent/agent/{agent_identifier}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Agent By Customer Key
     * customer_key または agent_guidで問い合わせ先情報を取得する agent_guidは非推奨
     * @param {String} agentIdentifier 組織情報識別子 (customer_key or agent_guid(非推奨))
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Agent}
     */
    getAgentByCustomerKey(agentIdentifier) {
      return this.getAgentByCustomerKeyWithHttpInfo(agentIdentifier)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get Staff
     * staff_guidでスタッフ情報を取得する
     * @param {String} staffGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Staff} and HTTP response
     */
    getStaffWithHttpInfo(staffGuid) {
      let postBody = null;
      // verify the required parameter 'staffGuid' is set
      if (staffGuid === undefined || staffGuid === null) {
        throw new Error("Missing the required parameter 'staffGuid' when calling getStaff");
      }

      let pathParams = {
        'staff_guid': staffGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Staff;
      return this.apiClient.callApi(
        '/agent/staff/{staff_guid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Staff
     * staff_guidでスタッフ情報を取得する
     * @param {String} staffGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Staff}
     */
    getStaff(staffGuid) {
      return this.getStaffWithHttpInfo(staffGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List Agent
     * API_KEYに紐づくカスタマーキーと一致する問い合わせ先組織情報一覧を取得する  クエリで customer_key を指定すれば対象を絞り込める
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.customerKey カスタマーキー
     * @param {Number} opts.startIndex 検索の開始インデックス (default to 1)
     * @param {Number} opts.itemsPerPage ページあたりの最大表示数 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AgentList} and HTTP response
     */
    listAgentWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'customer_key': this.apiClient.buildCollectionParam(opts['customerKey'], 'multi'),
        'start_index': opts['startIndex'],
        'items_per_page': opts['itemsPerPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AgentList;
      return this.apiClient.callApi(
        '/agent/agent/list/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List Agent
     * API_KEYに紐づくカスタマーキーと一致する問い合わせ先組織情報一覧を取得する  クエリで customer_key を指定すれば対象を絞り込める
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.customerKey カスタマーキー
     * @param {Number} opts.startIndex 検索の開始インデックス (default to 1)
     * @param {Number} opts.itemsPerPage ページあたりの最大表示数 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AgentList}
     */
    listAgent(opts) {
      return this.listAgentWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
