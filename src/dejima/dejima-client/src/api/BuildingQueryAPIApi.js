/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。 
 *
 * The version of the OpenAPI document: 6.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Building from '../model/Building';
import BuildingList from '../model/BuildingList';
import HTTPValidationError from '../model/HTTPValidationError';
import Order from '../model/Order';

/**
* BuildingQueryAPI service.
* @module api/BuildingQueryAPIApi
* @version 6.1.3
*/
export default class BuildingQueryAPIApi {

    /**
    * Constructs a new BuildingQueryAPIApi. 
    * @alias module:api/BuildingQueryAPIApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Get Building
     * building_guidで建物情報を取得する
     * @param {String} buildingGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Building} and HTTP response
     */
    getBuildingWithHttpInfo(buildingGuid) {
      let postBody = null;
      // verify the required parameter 'buildingGuid' is set
      if (buildingGuid === undefined || buildingGuid === null) {
        throw new Error("Missing the required parameter 'buildingGuid' when calling getBuilding");
      }

      let pathParams = {
        'building_guid': buildingGuid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Building;
      return this.apiClient.callApi(
        '/building/building/{building_guid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get Building
     * building_guidで建物情報を取得する
     * @param {String} buildingGuid 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Building}
     */
    getBuilding(buildingGuid) {
      return this.getBuildingWithHttpInfo(buildingGuid)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Search Building
     * 建物一覧を取得する
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startIndex 検索の開始インデックス (default to 1)
     * @param {Number} opts.itemsPerPage ページあたりの最大表示数 (default to 10)
     * @param {Array.<String>} opts.buildingGuid 建物スペックGUID
     * @param {Array.<Number>} opts.buildingTypeCode 建物形式区分<br/>1: マンション<br/>2: リゾートマンション<br/>3: アパート<br/>4: テラスハウス<br/>5: タウンハウス<br/>6: 戸建<br/>7: 土地<br/>8: 店舗<br/>9: 事務所<br/>10: ビル<br/>11: 倉庫<br/>12: 工場<br/>13: トランクルーム<br/>14: 駐車場<br/>15: バイク置き場<br/>16: その他
     * @param {Array.<Number>} opts.structureCode 構造区分<br/>1: 木造<br/>2: 軽量鉄骨<br/>3: 鉄筋コンクリート<br/>4: 鉄骨鉄筋コンクリート<br/>5: ALC<br/>6: プレキャストコンクリート<br/>7: 鉄筋ブロック<br/>8: 鉄骨プレ<br/>9: 鉄骨<br/>10: その他
     * @param {Number} opts.siteAreaFrom 土地面積検索区間
     * @param {Number} opts.siteAreaTo 土地面積検索区間
     * @param {module:model/Order} opts.siteAreaOrder 土地面積ソート順
     * @param {String} opts.buildingName 建物名
     * @param {String} opts.buildingFurigana 建物名フリガナ
     * @param {String} opts.prefecture 都道府県
     * @param {Array.<Number>} opts.prefectureCode 都道府県コード
     * @param {Array.<String>} opts.city 市区郡
     * @param {Array.<Number>} opts.cityCode 市区郡コード
     * @param {Array.<String>} opts.town 町村
     * @param {Array.<Number>} opts.jisCode JISコード
     * @param {Array.<String>} opts.address 住所
     * @param {Array.<Number>} opts.customerKey カスタマーキー
     * @param {Array.<String>} opts.tatemonoGuid One建物GUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/BuildingList} and HTTP response
     */
    searchBuildingWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_index': opts['startIndex'],
        'items_per_page': opts['itemsPerPage'],
        'building_guid': this.apiClient.buildCollectionParam(opts['buildingGuid'], 'multi'),
        'building_type_code': this.apiClient.buildCollectionParam(opts['buildingTypeCode'], 'multi'),
        'structure_code': this.apiClient.buildCollectionParam(opts['structureCode'], 'multi'),
        'site_area.from': opts['siteAreaFrom'],
        'site_area.to': opts['siteAreaTo'],
        'site_area.order': opts['siteAreaOrder'],
        'building_name': opts['buildingName'],
        'building_furigana': opts['buildingFurigana'],
        'prefecture': opts['prefecture'],
        'prefecture_code': this.apiClient.buildCollectionParam(opts['prefectureCode'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'city_code': this.apiClient.buildCollectionParam(opts['cityCode'], 'multi'),
        'town': this.apiClient.buildCollectionParam(opts['town'], 'multi'),
        'jis_code': this.apiClient.buildCollectionParam(opts['jisCode'], 'multi'),
        'address': this.apiClient.buildCollectionParam(opts['address'], 'multi'),
        'customer_key': this.apiClient.buildCollectionParam(opts['customerKey'], 'multi'),
        'tatemono_guid': this.apiClient.buildCollectionParam(opts['tatemonoGuid'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['APIKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BuildingList;
      return this.apiClient.callApi(
        '/building/building/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Search Building
     * 建物一覧を取得する
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startIndex 検索の開始インデックス (default to 1)
     * @param {Number} opts.itemsPerPage ページあたりの最大表示数 (default to 10)
     * @param {Array.<String>} opts.buildingGuid 建物スペックGUID
     * @param {Array.<Number>} opts.buildingTypeCode 建物形式区分<br/>1: マンション<br/>2: リゾートマンション<br/>3: アパート<br/>4: テラスハウス<br/>5: タウンハウス<br/>6: 戸建<br/>7: 土地<br/>8: 店舗<br/>9: 事務所<br/>10: ビル<br/>11: 倉庫<br/>12: 工場<br/>13: トランクルーム<br/>14: 駐車場<br/>15: バイク置き場<br/>16: その他
     * @param {Array.<Number>} opts.structureCode 構造区分<br/>1: 木造<br/>2: 軽量鉄骨<br/>3: 鉄筋コンクリート<br/>4: 鉄骨鉄筋コンクリート<br/>5: ALC<br/>6: プレキャストコンクリート<br/>7: 鉄筋ブロック<br/>8: 鉄骨プレ<br/>9: 鉄骨<br/>10: その他
     * @param {Number} opts.siteAreaFrom 土地面積検索区間
     * @param {Number} opts.siteAreaTo 土地面積検索区間
     * @param {module:model/Order} opts.siteAreaOrder 土地面積ソート順
     * @param {String} opts.buildingName 建物名
     * @param {String} opts.buildingFurigana 建物名フリガナ
     * @param {String} opts.prefecture 都道府県
     * @param {Array.<Number>} opts.prefectureCode 都道府県コード
     * @param {Array.<String>} opts.city 市区郡
     * @param {Array.<Number>} opts.cityCode 市区郡コード
     * @param {Array.<String>} opts.town 町村
     * @param {Array.<Number>} opts.jisCode JISコード
     * @param {Array.<String>} opts.address 住所
     * @param {Array.<Number>} opts.customerKey カスタマーキー
     * @param {Array.<String>} opts.tatemonoGuid One建物GUID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/BuildingList}
     */
    searchBuilding(opts) {
      return this.searchBuildingWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
