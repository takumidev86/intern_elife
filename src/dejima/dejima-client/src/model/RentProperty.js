/**
 * ES 物件API
 * （株）いい生活 が提供予定の 物件情報API のインターフェイス仕様書  いい物件Oneに登録した賃貸物件情報を参照する物件参照API仕様について定める。  ※1: 開発中のため、実際のリリース時の仕様は異なる場合がございます。  ※2: 売買物件に関する仕様に関してはα版であり、今後大きな仕様の見直しを行う可能性がございます。  ## リソース仕様  ### 通信仕様  HTTP/2 および HTTP/1.1 をサポートする。通信はTLSで暗号化されたHTTPSのみを許可する。  ### リクエストヘッダ  リクエストヘッダには以下の指定を必須とする。  | No. | リクエストヘッダのフィールド名 | 指定値 | |:---:|:-------------------------------|:-------| | 1 | Accept | application/json | | 2 | X-Api-Key | 弊社が指定するキー。ご利用のお客様を特定するためのもの。 |  Acceptヘッダには、常にapplication/json を指定する。 これにより、レスポンスがJSONであることを指示する。  ### データフォーマットと文字コード  データフォーマットはJSON、文字コードはUTF-8とする。  ### データ型  通常のJSONの型以外に擬似型としていくつかのデータ型を用意している。 これは、JSON標準では表現しきれないデータや、不動産特有のデータを扱うために定義したもので使用する。 また、ここに記載の無いデータ型については、 OpenAPI Specification (Version 3.0.2) の DataTypes に準拠する。  * [DataTypes](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#data-types)   | No. | 型 | 説明 | |:---:|:---|:-----| | 1 | string | JSON標準の文字列 | | 2 | int | JSON標準の整数 | | 3 | float | JSON標準の浮動小数点数 | | 4 | bool | JSON標準の真偽値 | | 5 | datetime | ISO8611フォーマットの日付時刻を表す文字列。YYYY-MM-DDTHH:MM:SS。 <br> 例: 2015-08-26T19:16:03 = 2015年8月26日19時16分03秒 | | 6 | date | ISO8611フォーマットの日付を表す文字列。YYYY-MM-DD。 <br> 例: 2015-08-26 = 2015年8月26日 | | 7 | datejun | 後述 |  #### datejun型  いい生活独自の日付と旬を表すフォーマット。YYYYMMJDD。  * YYYY: 西暦年 * MM: 月。01～12。ただし00とすることにより、年単位までの精度の数字を表現可能。 * J: 旬。1=上旬、2=中旬、3=下旬。 0とすることで月単位までの精度の数字を表現可能。 * DD: 日。01～31。ただし00とすることにより、旬単位までの精度の数字を表現可能。日単位の精度の場合、1～10日までは旬を1、11～20日までは旬を2、21日以降は旬を3と指定する必要がある。 * 例:     * 201900000 = 2019年     * 201901000 = 2019年1月     * 201903100 = 2019年3月上旬     * 201912300 = 2019年12月下旬     * 201906105 = 2019年6月5日     * 201908216 = 2019年8月16日  ## 検索パラメータ  ### OR 検索  パラメータタイプが `array` のキーについては、クエリパラメータで複数指定を行った場合、 指定された値のいずれかに一致する対象を検索する（ OR 検索）。  ex) `?layout_type_code=1&layout_type_code=2`  ### ソート順  `*.order` という名前のパラメータでソート順を指定可能。ascを指定したとき昇順、descを指定したとき降順となる。  ex) `?price.order=desc`  基本的にソート順は一つだけ指定する。 
 *
 * The version of the OpenAPI document: 6.1.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DwellingUnit from './DwellingUnit';
import Institution from './Institution';
import PropertyParking from './PropertyParking';
import RentContractCondition from './RentContractCondition';
import RentPickupFeature from './RentPickupFeature';
import RentReform from './RentReform';
import Tag from './Tag';
import Transportation from './Transportation';

/**
 * The RentProperty model module.
 * @module model/RentProperty
 * @version 6.1.3
 */
class RentProperty {
    /**
     * Constructs a new <code>RentProperty</code>.
     * 賃貸物件
     * @alias module:model/RentProperty
     * @param propertyFullKey {String} 
     * @param propertyUseCode {Number} 1: 居住用<br/>2: 事業用<br/>3: 投資用
     * @param propertyTypeCode {Number} 101: マンション<br/>102: リゾートマンション<br/>103: アパート<br/>104: コーポ<br/>105: テラスハウス<br/>106: タウンハウス<br/>107: 戸建<br/>108: 土地<br/>109: 借地権譲渡<br/>110: 底地権譲渡<br/>111: 店舗<br/>112: 店舗事務所<br/>113: 住宅付店舗<br/>114: 事務所<br/>115: ビル<br/>116: 倉庫<br/>117: 工場<br/>118: トランクルーム<br/>119: 駐車場<br/>120: バイク置き場<br/>121: その他<br/>122: 間借り
     * @param nameDisplayFlag {Boolean} 
     * @param branchNumberDisplayFlag {Boolean} 
     * @param roomNumberDisplayFlag {Boolean} 
     * @param mapMarkerDisplayFlag {Boolean} 
     * @param panoramaFlag {Boolean} 
     * @param customerKey {Number} 
     * @param agentGuid {String} 
     * @param contractCondition {module:model/RentContractCondition} 
     * @param propertyParking {module:model/PropertyParking} 
     * @param propertyTag {Array.<module:model/Tag>} 
     * @param transportation {Array.<module:model/Transportation>} 
     * @param institution {Array.<module:model/Institution>} 
     */
    constructor(propertyFullKey, propertyUseCode, propertyTypeCode, nameDisplayFlag, branchNumberDisplayFlag, roomNumberDisplayFlag, mapMarkerDisplayFlag, panoramaFlag, customerKey, agentGuid, contractCondition, propertyParking, propertyTag, transportation, institution) { 
        
        RentProperty.initialize(this, propertyFullKey, propertyUseCode, propertyTypeCode, nameDisplayFlag, branchNumberDisplayFlag, roomNumberDisplayFlag, mapMarkerDisplayFlag, panoramaFlag, customerKey, agentGuid, contractCondition, propertyParking, propertyTag, transportation, institution);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, propertyFullKey, propertyUseCode, propertyTypeCode, nameDisplayFlag, branchNumberDisplayFlag, roomNumberDisplayFlag, mapMarkerDisplayFlag, panoramaFlag, customerKey, agentGuid, contractCondition, propertyParking, propertyTag, transportation, institution) { 
        obj['property_full_key'] = propertyFullKey;
        obj['property_use_code'] = propertyUseCode;
        obj['property_type_code'] = propertyTypeCode;
        obj['name_display_flag'] = nameDisplayFlag;
        obj['branch_number_display_flag'] = branchNumberDisplayFlag;
        obj['room_number_display_flag'] = roomNumberDisplayFlag;
        obj['map_marker_display_flag'] = mapMarkerDisplayFlag;
        obj['panorama_flag'] = panoramaFlag;
        obj['customer_key'] = customerKey;
        obj['agent_guid'] = agentGuid;
        obj['contract_condition'] = contractCondition;
        obj['property_parking'] = propertyParking;
        obj['property_tag'] = propertyTag;
        obj['transportation'] = transportation;
        obj['institution'] = institution;
    }

    /**
     * Constructs a <code>RentProperty</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RentProperty} obj Optional instance to populate.
     * @return {module:model/RentProperty} The populated <code>RentProperty</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RentProperty();

            if (data.hasOwnProperty('property_full_key')) {
                obj['property_full_key'] = ApiClient.convertToType(data['property_full_key'], 'String');
            }
            if (data.hasOwnProperty('original_property_code_text')) {
                obj['original_property_code_text'] = ApiClient.convertToType(data['original_property_code_text'], 'String');
            }
            if (data.hasOwnProperty('property_class')) {
                obj['property_class'] = ApiClient.convertToType(data['property_class'], 'String');
            }
            if (data.hasOwnProperty('property_class_code')) {
                obj['property_class_code'] = ApiClient.convertToType(data['property_class_code'], 'Number');
            }
            if (data.hasOwnProperty('property_use')) {
                obj['property_use'] = ApiClient.convertToType(data['property_use'], 'String');
            }
            if (data.hasOwnProperty('property_use_code')) {
                obj['property_use_code'] = ApiClient.convertToType(data['property_use_code'], 'Number');
            }
            if (data.hasOwnProperty('property_type')) {
                obj['property_type'] = ApiClient.convertToType(data['property_type'], 'String');
            }
            if (data.hasOwnProperty('property_type_code')) {
                obj['property_type_code'] = ApiClient.convertToType(data['property_type_code'], 'Number');
            }
            if (data.hasOwnProperty('has_entries')) {
                obj['has_entries'] = ApiClient.convertToType(data['has_entries'], 'Boolean');
            }
            if (data.hasOwnProperty('current_status')) {
                obj['current_status'] = ApiClient.convertToType(data['current_status'], 'String');
            }
            if (data.hasOwnProperty('current_status_code')) {
                obj['current_status_code'] = ApiClient.convertToType(data['current_status_code'], 'Number');
            }
            if (data.hasOwnProperty('departure_date')) {
                obj['departure_date'] = ApiClient.convertToType(data['departure_date'], 'Date');
            }
            if (data.hasOwnProperty('name_display_flag')) {
                obj['name_display_flag'] = ApiClient.convertToType(data['name_display_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('branch_number_display_flag')) {
                obj['branch_number_display_flag'] = ApiClient.convertToType(data['branch_number_display_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('room_number_display_flag')) {
                obj['room_number_display_flag'] = ApiClient.convertToType(data['room_number_display_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('map_marker_display_flag')) {
                obj['map_marker_display_flag'] = ApiClient.convertToType(data['map_marker_display_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('gas')) {
                obj['gas'] = ApiClient.convertToType(data['gas'], 'String');
            }
            if (data.hasOwnProperty('gas_code')) {
                obj['gas_code'] = ApiClient.convertToType(data['gas_code'], 'Number');
            }
            if (data.hasOwnProperty('water_supply')) {
                obj['water_supply'] = ApiClient.convertToType(data['water_supply'], 'String');
            }
            if (data.hasOwnProperty('water_supply_code')) {
                obj['water_supply_code'] = ApiClient.convertToType(data['water_supply_code'], 'Number');
            }
            if (data.hasOwnProperty('sewerage')) {
                obj['sewerage'] = ApiClient.convertToType(data['sewerage'], 'String');
            }
            if (data.hasOwnProperty('sewerage_code')) {
                obj['sewerage_code'] = ApiClient.convertToType(data['sewerage_code'], 'Number');
            }
            if (data.hasOwnProperty('has_electricity')) {
                obj['has_electricity'] = ApiClient.convertToType(data['has_electricity'], 'Boolean');
            }
            if (data.hasOwnProperty('it_jusetsu_flag')) {
                obj['it_jusetsu_flag'] = ApiClient.convertToType(data['it_jusetsu_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('is_newly_built')) {
                obj['is_newly_built'] = ApiClient.convertToType(data['is_newly_built'], 'Boolean');
            }
            if (data.hasOwnProperty('new_used')) {
                obj['new_used'] = ApiClient.convertToType(data['new_used'], 'String');
            }
            if (data.hasOwnProperty('new_used_code')) {
                obj['new_used_code'] = ApiClient.convertToType(data['new_used_code'], 'Number');
            }
            if (data.hasOwnProperty('panorama_flag')) {
                obj['panorama_flag'] = ApiClient.convertToType(data['panorama_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('website_comment')) {
                obj['website_comment'] = ApiClient.convertToType(data['website_comment'], 'String');
            }
            if (data.hasOwnProperty('pdf_comment')) {
                obj['pdf_comment'] = ApiClient.convertToType(data['pdf_comment'], 'String');
            }
            if (data.hasOwnProperty('tantosha_comment')) {
                obj['tantosha_comment'] = ApiClient.convertToType(data['tantosha_comment'], 'String');
            }
            if (data.hasOwnProperty('sales_point')) {
                obj['sales_point'] = ApiClient.convertToType(data['sales_point'], 'String');
            }
            if (data.hasOwnProperty('speciality_comment')) {
                obj['speciality_comment'] = ApiClient.convertToType(data['speciality_comment'], 'String');
            }
            if (data.hasOwnProperty('speciality_pdf_comment')) {
                obj['speciality_pdf_comment'] = ApiClient.convertToType(data['speciality_pdf_comment'], 'String');
            }
            if (data.hasOwnProperty('equipment_comment')) {
                obj['equipment_comment'] = ApiClient.convertToType(data['equipment_comment'], 'String');
            }
            if (data.hasOwnProperty('equipment_pdf_comment')) {
                obj['equipment_pdf_comment'] = ApiClient.convertToType(data['equipment_pdf_comment'], 'String');
            }
            if (data.hasOwnProperty('customer_key')) {
                obj['customer_key'] = ApiClient.convertToType(data['customer_key'], 'Number');
            }
            if (data.hasOwnProperty('agent_guid')) {
                obj['agent_guid'] = ApiClient.convertToType(data['agent_guid'], 'String');
            }
            if (data.hasOwnProperty('staff_guid')) {
                obj['staff_guid'] = ApiClient.convertToType(data['staff_guid'], 'String');
            }
            if (data.hasOwnProperty('contract_condition')) {
                obj['contract_condition'] = ApiClient.convertToType(data['contract_condition'], RentContractCondition);
            }
            if (data.hasOwnProperty('property_parking')) {
                obj['property_parking'] = ApiClient.convertToType(data['property_parking'], PropertyParking);
            }
            if (data.hasOwnProperty('property_tag')) {
                obj['property_tag'] = ApiClient.convertToType(data['property_tag'], [Tag]);
            }
            if (data.hasOwnProperty('building_guid')) {
                obj['building_guid'] = ApiClient.convertToType(data['building_guid'], 'String');
            }
            if (data.hasOwnProperty('dwelling_unit')) {
                obj['dwelling_unit'] = ApiClient.convertToType(data['dwelling_unit'], DwellingUnit);
            }
            if (data.hasOwnProperty('transportation')) {
                obj['transportation'] = ApiClient.convertToType(data['transportation'], [Transportation]);
            }
            if (data.hasOwnProperty('other_transportation')) {
                obj['other_transportation'] = ApiClient.convertToType(data['other_transportation'], 'String');
            }
            if (data.hasOwnProperty('institution')) {
                obj['institution'] = ApiClient.convertToType(data['institution'], [Institution]);
            }
            if (data.hasOwnProperty('reform')) {
                obj['reform'] = ApiClient.convertToType(data['reform'], RentReform);
            }
            if (data.hasOwnProperty('company_remark')) {
                obj['company_remark'] = ApiClient.convertToType(data['company_remark'], 'String');
            }
            if (data.hasOwnProperty('is_published')) {
                obj['is_published'] = ApiClient.convertToType(data['is_published'], 'Boolean');
            }
            if (data.hasOwnProperty('published_datetime')) {
                obj['published_datetime'] = ApiClient.convertToType(data['published_datetime'], 'Date');
            }
            if (data.hasOwnProperty('last_update_datetime')) {
                obj['last_update_datetime'] = ApiClient.convertToType(data['last_update_datetime'], 'Date');
            }
            if (data.hasOwnProperty('next_renewal_datetime')) {
                obj['next_renewal_datetime'] = ApiClient.convertToType(data['next_renewal_datetime'], 'Date');
            }
            if (data.hasOwnProperty('rent_pickup_feature')) {
                obj['rent_pickup_feature'] = ApiClient.convertToType(data['rent_pickup_feature'], RentPickupFeature);
            }
        }
        return obj;
    }


}

/**
 * @member {String} property_full_key
 */
RentProperty.prototype['property_full_key'] = undefined;

/**
 * @member {String} original_property_code_text
 */
RentProperty.prototype['original_property_code_text'] = undefined;

/**
 * @member {String} property_class
 */
RentProperty.prototype['property_class'] = undefined;

/**
 * 1: 土地<br/>2: 建物<br/>3: 区画<br/>4: 建物付帯設備
 * @member {Number} property_class_code
 */
RentProperty.prototype['property_class_code'] = undefined;

/**
 * @member {String} property_use
 */
RentProperty.prototype['property_use'] = undefined;

/**
 * 1: 居住用<br/>2: 事業用<br/>3: 投資用
 * @member {Number} property_use_code
 */
RentProperty.prototype['property_use_code'] = undefined;

/**
 * @member {String} property_type
 */
RentProperty.prototype['property_type'] = undefined;

/**
 * 101: マンション<br/>102: リゾートマンション<br/>103: アパート<br/>104: コーポ<br/>105: テラスハウス<br/>106: タウンハウス<br/>107: 戸建<br/>108: 土地<br/>109: 借地権譲渡<br/>110: 底地権譲渡<br/>111: 店舗<br/>112: 店舗事務所<br/>113: 住宅付店舗<br/>114: 事務所<br/>115: ビル<br/>116: 倉庫<br/>117: 工場<br/>118: トランクルーム<br/>119: 駐車場<br/>120: バイク置き場<br/>121: その他<br/>122: 間借り
 * @member {Number} property_type_code
 */
RentProperty.prototype['property_type_code'] = undefined;

/**
 * @member {Boolean} has_entries
 */
RentProperty.prototype['has_entries'] = undefined;

/**
 * @member {String} current_status
 */
RentProperty.prototype['current_status'] = undefined;

/**
 * 1: 居住中<br/>2: 空室<br/>3: 建築中<br/>4: 退去予定<br/>5: 改装中<br/>6: 完成済
 * @member {Number} current_status_code
 */
RentProperty.prototype['current_status_code'] = undefined;

/**
 * @member {Date} departure_date
 */
RentProperty.prototype['departure_date'] = undefined;

/**
 * @member {Boolean} name_display_flag
 */
RentProperty.prototype['name_display_flag'] = undefined;

/**
 * @member {Boolean} branch_number_display_flag
 */
RentProperty.prototype['branch_number_display_flag'] = undefined;

/**
 * @member {Boolean} room_number_display_flag
 */
RentProperty.prototype['room_number_display_flag'] = undefined;

/**
 * @member {Boolean} map_marker_display_flag
 */
RentProperty.prototype['map_marker_display_flag'] = undefined;

/**
 * @member {String} gas
 */
RentProperty.prototype['gas'] = undefined;

/**
 * 1: 都市ガス<br/>2: プロパン<br/>3: 共同<br/>4: その他
 * @member {Number} gas_code
 */
RentProperty.prototype['gas_code'] = undefined;

/**
 * @member {String} water_supply
 */
RentProperty.prototype['water_supply'] = undefined;

/**
 * 1: 無<br/>2: メーター<br/>3: 専用メーター<br/>4: 小メーター<br/>5: 割当<br/>6: 本管より直結<br/>7: 受水槽<br/>8: 公営<br/>9: 私営<br/>10: 井戸<br/>11: 共同<br/>12: 簡易<br/>13: 公営水道引込可<br/>14: 公営水道引込済<br/>15: その他
 * @member {Number} water_supply_code
 */
RentProperty.prototype['water_supply_code'] = undefined;

/**
 * @member {String} sewerage
 */
RentProperty.prototype['sewerage'] = undefined;

/**
 * 1: 公共下水<br/>2: 浄化槽_個別<br/>3: 浄化槽_集中<br/>4: 汲取り<br/>5: 側溝_個別<br/>6: 側溝_集中<br/>7: その他
 * @member {Number} sewerage_code
 */
RentProperty.prototype['sewerage_code'] = undefined;

/**
 * @member {Boolean} has_electricity
 */
RentProperty.prototype['has_electricity'] = undefined;

/**
 * @member {Boolean} it_jusetsu_flag
 */
RentProperty.prototype['it_jusetsu_flag'] = undefined;

/**
 * @member {Boolean} is_newly_built
 */
RentProperty.prototype['is_newly_built'] = undefined;

/**
 * @member {String} new_used
 */
RentProperty.prototype['new_used'] = undefined;

/**
 * @member {Number} new_used_code
 */
RentProperty.prototype['new_used_code'] = undefined;

/**
 * @member {Boolean} panorama_flag
 */
RentProperty.prototype['panorama_flag'] = undefined;

/**
 * @member {String} website_comment
 */
RentProperty.prototype['website_comment'] = undefined;

/**
 * @member {String} pdf_comment
 */
RentProperty.prototype['pdf_comment'] = undefined;

/**
 * @member {String} tantosha_comment
 */
RentProperty.prototype['tantosha_comment'] = undefined;

/**
 * @member {String} sales_point
 */
RentProperty.prototype['sales_point'] = undefined;

/**
 * @member {String} speciality_comment
 */
RentProperty.prototype['speciality_comment'] = undefined;

/**
 * @member {String} speciality_pdf_comment
 */
RentProperty.prototype['speciality_pdf_comment'] = undefined;

/**
 * @member {String} equipment_comment
 */
RentProperty.prototype['equipment_comment'] = undefined;

/**
 * @member {String} equipment_pdf_comment
 */
RentProperty.prototype['equipment_pdf_comment'] = undefined;

/**
 * @member {Number} customer_key
 */
RentProperty.prototype['customer_key'] = undefined;

/**
 * @member {String} agent_guid
 */
RentProperty.prototype['agent_guid'] = undefined;

/**
 * @member {String} staff_guid
 */
RentProperty.prototype['staff_guid'] = undefined;

/**
 * @member {module:model/RentContractCondition} contract_condition
 */
RentProperty.prototype['contract_condition'] = undefined;

/**
 * @member {module:model/PropertyParking} property_parking
 */
RentProperty.prototype['property_parking'] = undefined;

/**
 * @member {Array.<module:model/Tag>} property_tag
 */
RentProperty.prototype['property_tag'] = undefined;

/**
 * @member {String} building_guid
 */
RentProperty.prototype['building_guid'] = undefined;

/**
 * @member {module:model/DwellingUnit} dwelling_unit
 */
RentProperty.prototype['dwelling_unit'] = undefined;

/**
 * @member {Array.<module:model/Transportation>} transportation
 */
RentProperty.prototype['transportation'] = undefined;

/**
 * @member {String} other_transportation
 */
RentProperty.prototype['other_transportation'] = undefined;

/**
 * @member {Array.<module:model/Institution>} institution
 */
RentProperty.prototype['institution'] = undefined;

/**
 * @member {module:model/RentReform} reform
 */
RentProperty.prototype['reform'] = undefined;

/**
 * @member {String} company_remark
 */
RentProperty.prototype['company_remark'] = undefined;

/**
 * @member {Boolean} is_published
 */
RentProperty.prototype['is_published'] = undefined;

/**
 * @member {Date} published_datetime
 */
RentProperty.prototype['published_datetime'] = undefined;

/**
 * @member {Date} last_update_datetime
 */
RentProperty.prototype['last_update_datetime'] = undefined;

/**
 * @member {Date} next_renewal_datetime
 */
RentProperty.prototype['next_renewal_datetime'] = undefined;

/**
 * @member {module:model/RentPickupFeature} rent_pickup_feature
 */
RentProperty.prototype['rent_pickup_feature'] = undefined;






export default RentProperty;

